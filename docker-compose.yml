version: '3'
services:
  api-svc:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        component: api
        mainclass: li.doerf.microstore.api.ApiApplicationKt
    image: doerfli/microstore-api-svc
    restart: always
    depends_on:
      - customer-svc
      - inventory-svc
      - kafka
      - order-svc
      - payment-svc
    ports:
      - 8080:8080
    environment:
      - MICROSTORE_CUSTOMER_HOSTNAME=customer-svc
    volumes:
      - api-svc-logs:/log
  customer-redis:
    image: redis:5.0.3-alpine
    restart: always
    ports:
      - "6379:6379"
  inventory-redis:
    image: redis:5.0.3-alpine
    restart: always
    ports:
      - "6381:6379"
  inventory-svc:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        component: inventory
        mainclass: li.doerf.microstore.inventory.InventoryApplicationKt
    image: doerfli/microstore-inventory-svc
    restart: always
    depends_on:
      - inventory-redis
      - kafka
    environment:
      - MICROSTORE_REDISHOST=inventory-redis
      - MICROSTORE_REDISPORT=6381
    volumes:
      - inventory-svc-logs:/log
  customer-svc:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        component: customer
        mainclass: li.doerf.microstore.customer.CustomerApplicationKt
    image: doerfli/microstore-customer-svc
    restart: always
    depends_on:
      - customer-redis
      - kafka
    environment:
      - MICROSTORE_REDISHOST=customer-redis
      - MICROSTORE_REDISPORT=6379
    volumes:
      - customer-svc-logs:/log
  order-redis:
    image: redis:5.0.3-alpine
    restart: always
    ports:
      - "6382:6379"
  order-svc:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        component: order
        mainclass: li.doerf.microstore.order.OrderApplicationKt
    image: doerfli/microstore-order-svc
    restart: always
    depends_on:
      - kafka
      - order-redis
    environment:
      - MICROSTORE_REDISHOST=order-redis
      - MICROSTORE_REDISPORT=6382
    volumes:
      - order-svc-logs:/log
  payment-redis:
    image: redis:5.0.3-alpine
    restart: always
    ports:
      - "6380:6379"
  payment-svc:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        component: payment
        mainclass: li.doerf.microstore.payment.PaymentApplicationKt
    image: doerfli/microstore-payment-svc
    restart: always
    depends_on:
      - payment-redis
      - kafka
    environment:
      - MICROSTORE_REDISHOST=payment-redis
      - MICROSTORE_REDISPORT=6380
    volumes:
      - payment-svc-logs:/log

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
  kafka:
    image: confluentinc/cp-kafka:5.2.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 

  elasticsearch:
    image: elasticsearch:7.0.1
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
  kibana:
    image: kibana:7.0.1
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
  logstash:
    image: logstash:7.0.1
    depends_on:
      - api-svc
      - customer-svc
      - inventory-svc
      - order-svc
      - payment-svc
    environment:
      - "CLOUDSTORE_ROOT=/logs"
    volumes:
      - "./logstash/:/usr/share/logstash/pipeline/:ro"
      - api-svc-logs:/logs/api/log
      - customer-svc-logs:/logs/customer/log
      - order-svc-logs:/logs/order/log
      - payment-svc-logs:/logs/payment/log

volumes:
  api-svc-logs:
  customer-svc-logs:
  inventory-svc-logs:
  order-svc-logs:
  payment-svc-logs:
